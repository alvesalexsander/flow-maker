const pagarConta = require('./map');
const {
    startPagarConta,
    impedido,
    saudacaoURA,
    transfereParaATH,
    encaminhaFluxoContratarPacotes,
    encerraLigacao,
    viaDeAcesso,
    verificaProprioAparelho,
    verificaSenhaUnica,
    perguntaQuerAlgoMais,
    desambiguador,
    agradeceDesliga,
    btt,
    dizBloqFinanceiro,
    mais1Fatura,
    mais1FaturaNao,
    mais1FaturaSim,
    mainClienteTitular,
    mainClienteTitularMais1,
    servicoCodigoBarras7,
    servicoCodigoBarras1,
    servicoCodigoBarras1Mais1,
    enviaFaturasSMS,
    enviaFaturasSMSMais1,
    servicoLinkNegocia2,
    enviaLinkNegocia,
    podeAcessarFaturasNoSite,
    bto,
    elegivelReliga,
    btoClienteTitular,
    veioFluxoInformaContaPaga,
    naoInformouContaPaga,
    ofereceReliga,
    respostaOfereceReliga,
    servicoReliga,
    respNaoETitular,
    motivoBloq,
    motivoBloqQuebra,
    motivoBloq24h,
    quebraTitular,
    servicoLinkNegocia6,
    SucessoLinkNegocia6,
    querFaturaBloq,
    servicoCodigoBarras5,
    expectFalhaCodBarra5,
    ofereceATH,
    expectSucessoCodBarras5,
    maisDe1FaturaAberto,
    expectOfereceFatAberto,
    querReceberFatEmAberto,
    enviaDemaisFaturas,
    expectEnviaDemaisFaturas,
    ultimas24hTitular,
    expectTitular24h,
    expectNaoTitular24h,
    querFaturaBloqNaoTitular,
    falhaLinkNegocia6,
    expectNaoQuerFatura,
    falhaServicoReliga,
    expectPerguntaDificuldade,
    possuiDificuldade,
    expectPerguntaQualDificuldade,
    qualDificuldade,
    servicoConsultaDados,
    internetReduzida,
    billingProfile,
    expectVelocidadeReduzida,
    querSaberDosPacotes,
    expectNavegacaoNormal,
    continuarOuATH,
    jaReiniciou,
    enviaGuiaApararelho,
    expectSucessoEnvioGuia,
    expectFalhaEnvioGuia,
    insisteReinicio,
    expectContinuarOuATH,
    expectQuerSaberDosPacotes,
    expectInsisteReinicio,
    veioDeNaoRecebimentoFatura,
    expectNaoRecebimentoFatura,
    contaDigital,
    expectContaDigital,
    expectNaoContaDigital,
    faturaEmAberto,
    intencaoCodigoBarras,
    aceitaCodBarras,
    expectNaoAceitaCodBarra,
    clienteInsiste,
    insisteFaturasAberto,
    insisteFaturasAbertoNao,
    insisteFaturasAbertoSim,
    expectNaoPossuiFaturaAberto,
    pediuAlgumMes,
    mesPossuiFaturaAberto,
    faturaUltimos12meses,
    expectNaoUltimos12meses,
    faturaUltimos6meses,
    expectNaoUltimos6meses,
    querContinuarURA,
    emailValido,
    expectEmailInvalido,
    expectComoPrefere,
    escolhaRealizada,
    verificaProprioAparelhoSMS,
    verificaProprioAparelhoEmail,
    verificaProprioAparelhoCasa,
    servicoFaturaSMS1,
    servicoFaturaEmail1,
    servicoFaturaCasa1,
    existemFaturasAbertoSMS,
    expectFalhaEmail,
    expectFalhaCasa,
    existemFaturasAbertoEmail,
    existemFaturasAbertoCasa,
    clienteContaDigital,
    expectTratNaoRecebimento,
    expectFaturasEmAbertoSMS,
    expectFaturasEmAbertoEmail,
    expectFaturasEmAbertoCasa,
    querReceberFatEmAbertoSMS,
    querReceberFatEmAbertoEmail,
    querReceberFatEmAbertoCasa,
    enviaFaturasEmAbertoSMS,
    enviaFaturasEmAbertoEmail,
    enviaFaturasEmAbertoCasa,
    expectOutroAparelhoSMS,
    expectOutroAparelhoEmail,
    expectOutroAparelhoCasa,
    fluxoSenhaSMS,
    fluxoSenhaEmail,
    fluxoSenhaCasa,
    expectEscolheCasa,
    confirmaCasa,
    expectSegundaChance,
    ofereceSegundaChance,
    semMesFaturaAberto,
    expectSemMesNaoPossuiFatura,
    precisaSegundaVia,
    expectPrecisaSegundaVia,
    qualMesSegundaVia,
    expectMesInvalido,
    segundaTentativaMes,
} = require('./nodes');

pagarConta.linkChain(
    // comum
    [perguntaQuerAlgoMais.getPath('Não quer mais nada'), agradeceDesliga],

// serviços
    // Serviço Código de Barras (7)
    [servicoCodigoBarras7.getPath('* Falha Serviço Cód.Barras'), podeAcessarFaturasNoSite],
        [podeAcessarFaturasNoSite, perguntaQuerAlgoMais],
    // Serviço Código de Barras (5)
    [servicoCodigoBarras5.getPath('* Falha Serviço Cód.Barras/SMS'), expectFalhaCodBarra5],
        [expectFalhaCodBarra5, ofereceATH],
            [ofereceATH.getPath('Aceita ir para ATH'), transfereParaATH],
            [ofereceATH.getPath('Não quer falar com ATH'), perguntaQuerAlgoMais],
        
    // Serviço Código de Barras e fatura por SMS(1)
    [servicoCodigoBarras1.getPath('* Falha Serviço Cód.Barras/Fatura'), podeAcessarFaturasNoSite],
    [servicoCodigoBarras1Mais1.getPath('* Falha Serviço Cód.Barras/Fatura'), podeAcessarFaturasNoSite],
    // Serviço Negocia
    [servicoLinkNegocia2.getPath('* Falha SMS (Link Negocia)'), perguntaQuerAlgoMais],
    [servicoLinkNegocia6.getPath('* Falha SMS (Link Negocia)'), falhaLinkNegocia6],
        [falhaLinkNegocia6, querFaturaBloq],
        [querFaturaBloq.getPath('* Não quer fatura do bloqueio'), perguntaQuerAlgoMais],
        // [expectNaoQuerFatura, perguntaQuerAlgoMais],
    // Serviço Religa
    [servicoReliga.getPath('* Falha no Religa'), falhaServicoReliga],
        [falhaServicoReliga, perguntaQuerAlgoMais],
    // Serviço Consulta Dados
    [servicoConsultaDados.getPath('* Falha na Consulta de Dados'), jaReiniciou],
    [jaReiniciou.getPath('Já reiniciou'), enviaGuiaApararelho],
    [jaReiniciou.getPath('Não reiniciou'), expectInsisteReinicio],
    [expectInsisteReinicio, insisteReinicio],
        [insisteReinicio.getPath('Aceita Reiniciar'), agradeceDesliga],
        [insisteReinicio.getPath('Não quer reiniciar'), enviaGuiaApararelho],
    // Serviço Billing
    [billingProfile.getPath('* Falha no billing'), expectQuerSaberDosPacotes],
    [expectQuerSaberDosPacotes, querSaberDosPacotes],
        [querSaberDosPacotes.getPath('Quer pacote adicional'), encaminhaFluxoContratarPacotes],
        [querSaberDosPacotes.getPath('Não quer pacote adicional'), perguntaQuerAlgoMais],
    // Serviço Guia de Aparelhos
    [enviaGuiaApararelho.getPath('* Sucesso no Envio do Guia'), expectSucessoEnvioGuia],
    [expectSucessoEnvioGuia, perguntaQuerAlgoMais],
    [enviaGuiaApararelho.getPath('* Falha no Envio do Guia'), expectFalhaEnvioGuia],
        [expectFalhaEnvioGuia, perguntaQuerAlgoMais],
    // Serviço Email
    [servicoFaturaEmail1.getPath('* Falha no serviço Email'), expectFalhaEmail],
        [expectFalhaEmail, ofereceATH],
    // Serviço Correios
    [servicoFaturaCasa1.getPath('* Falha no serviço Correios'), expectFalhaCasa],
        [expectFalhaCasa, ofereceATH],   



    [startPagarConta, billingProfile],
        [billingProfile.getPath('* Sucesso no billing'), veioDeNaoRecebimentoFatura],
            [veioDeNaoRecebimentoFatura.getPath('Veio de #desambiguadorNaoRecebimentoDeFatura'), expectNaoRecebimentoFatura],
                [expectNaoRecebimentoFatura, contaDigital],
                    [contaDigital.getPath('* É conta digital'), expectContaDigital],
                        [expectContaDigital, mainClienteTitular],
                    [contaDigital.getPath('* Não é conta digital'), expectNaoContaDigital],
                        [expectNaoContaDigital, mainClienteTitular],
                        //
            [veioDeNaoRecebimentoFatura.getPath('Não veio de #desambiguadorNaoRecebimentoDeFatura').noStepMessage(), mainClienteTitular],
            [mainClienteTitular.getPath('* Não é titular'), faturaEmAberto],
                [faturaEmAberto.getPath('* Possui fatura em aberto'), intencaoCodigoBarras],
                [intencaoCodigoBarras.getPath('VEIO DE DESAMBIGUADOR CODIGOBARRAS'), servicoCodigoBarras5],
                    [servicoCodigoBarras5.getPath('* Sucesso Serviço Cód.Barras/SMS'), maisDe1FaturaAberto],
                        [maisDe1FaturaAberto.getPath('* Não possui mais de 1 fatura em aberto'), mais1FaturaNao],
                            [mais1FaturaNao, perguntaQuerAlgoMais],
                        [maisDe1FaturaAberto.getPath('* Possui mais de 1 fatura em aberto'), mais1FaturaSim],
                            [mais1FaturaSim, perguntaQuerAlgoMais],
                [intencaoCodigoBarras.getPath('Não veio de desambiguadorCodigoBarras'), expectOfereceFatAberto],
                [expectOfereceFatAberto, aceitaCodBarras],
                    [aceitaCodBarras.getPath('Aceita receber Código de Barras'), servicoCodigoBarras5],
                    [aceitaCodBarras.getPath('Não aceita receber Código de Barras'), expectNaoAceitaCodBarra],
                        [expectNaoAceitaCodBarra, clienteInsiste],
                            [clienteInsiste.getPath('Quer algo mais: #desambiguadorCodigoBarras ou SegundaVia ou Pagar Conta ou NaoRecebimentoFatura'), insisteFaturasAberto],
                                [insisteFaturasAberto.getPath('* (insistencia) Não possui faturas em aberto'), insisteFaturasAbertoNao],
                                    [insisteFaturasAbertoNao, perguntaQuerAlgoMais],
                                [insisteFaturasAberto.getPath('* (insistencia) Possui faturas em aberto'), insisteFaturasAbertoSim],
                                    [insisteFaturasAbertoSim, perguntaQuerAlgoMais],
                            [clienteInsiste.getPath('Não quer mais nada').noStepMessage(), perguntaQuerAlgoMais],

                [faturaEmAberto.getPath('* Não possui fatura em aberto'), expectNaoPossuiFaturaAberto],
                    [expectNaoPossuiFaturaAberto, perguntaQuerAlgoMais],
            //        
            // [mainClienteTitular.getPath('* É titular'), pediuAlgumMes],
                [pediuAlgumMes.getPath('Fatura de um mês espefícico'), mesPossuiFaturaAberto],
                    [mesPossuiFaturaAberto.getPath('Mês não está nas faturas em aberto'), faturaUltimos12meses],
                        [faturaUltimos12meses.getPath('Não é dos últimos 12 meses'), expectNaoUltimos12meses],
                            [expectNaoUltimos12meses, transfereParaATH],
                        [faturaUltimos12meses.getPath('É dos últimos 12 meses').noStepMessage(), faturaUltimos6meses],
                            [faturaUltimos6meses.getPath('Não é dos ultimos 6 meses'), expectNaoUltimos6meses],
                                [expectNaoUltimos6meses, querContinuarURA],
                                    [querContinuarURA.getPath('Quer continuar com o ATH'), transfereParaATH],
                                    [querContinuarURA.getPath('Quer continuar com a URA'), verificaProprioAparelhoSMS],
                                    //
                            [faturaUltimos6meses.getPath('É dos ultimos 6 meses'), emailValido],
                                [emailValido.getPath('* Email inválido'), expectEmailInvalido],
                                    [expectEmailInvalido, verificaProprioAparelhoSMS],
                                [emailValido.getPath('* Email válido'), expectComoPrefere],
                                    [expectComoPrefere, escolhaRealizada],
                                        [escolhaRealizada.getPath('Quer receber por SMS'), verificaProprioAparelhoSMS],
                                            [verificaProprioAparelhoSMS.getPath('* Ligando do próprio aparelho'), servicoFaturaSMS1],
                                                [servicoFaturaSMS1.getPath('* Falha no serviço SMS').noStepMessage(), servicoCodigoBarras5.getPath('* Falha Serviço Cód.Barras/SMS')],
                                                [servicoFaturaSMS1.getPath('* Sucesso no serviço SMS'), existemFaturasAbertoSMS],
                                                    [existemFaturasAbertoSMS, clienteContaDigital],
                                                        [clienteContaDigital, perguntaQuerAlgoMais],
                                                            [expectTratNaoRecebimento, perguntaQuerAlgoMais],
                                                        [expectFaturasEmAbertoSMS, querReceberFatEmAbertoSMS],
                                                        [querReceberFatEmAbertoSMS.getPath('Não quer receber faturas em aberto'), clienteContaDigital],
                                                        [querReceberFatEmAbertoSMS.getPath('Quer receber faturas em aberto'), enviaFaturasEmAbertoSMS],
                                                        [enviaFaturasEmAbertoSMS, clienteContaDigital],
                                            [verificaProprioAparelhoSMS.getPath('* Ligando de outro aparelho'), expectOutroAparelhoSMS],
                                                [expectOutroAparelhoSMS, fluxoSenhaSMS],
                                                    [fluxoSenhaSMS.getPath('* Senha Incorreta'), ofereceATH],
                                                    [fluxoSenhaSMS.getPath('* Sucesso no Fluxo de Senha'), servicoFaturaSMS1],
                                        // FIM SMS
                                        [escolhaRealizada.getPath('Quer receber por Email'), verificaProprioAparelhoEmail],
                                        [verificaProprioAparelhoEmail.getPath('* Ligando do próprio aparelho'), servicoFaturaEmail1],
                                            [servicoFaturaEmail1.getPath('* Sucesso no serviço Email'), existemFaturasAbertoEmail],
                                                [existemFaturasAbertoEmail, clienteContaDigital],
                                                    [expectFaturasEmAbertoEmail, querReceberFatEmAbertoEmail],
                                                    [querReceberFatEmAbertoEmail.getPath('Não quer receber faturas em aberto'), clienteContaDigital],
                                                    [querReceberFatEmAbertoEmail.getPath('Quer receber faturas em aberto'), enviaFaturasEmAbertoEmail],
                                                    [enviaFaturasEmAbertoEmail, clienteContaDigital],
                                        [verificaProprioAparelhoEmail.getPath('* Ligando de outro aparelho'), expectOutroAparelhoEmail],
                                            [expectOutroAparelhoEmail, fluxoSenhaEmail],
                                                [fluxoSenhaEmail.getPath('* Senha Incorreta'), ofereceATH],
                                                [fluxoSenhaEmail.getPath('* Sucesso no Fluxo de Senha'), servicoFaturaEmail1],
                                        // FIM EMAIL
                                        [escolhaRealizada.getPath('Quer receber em Casa'), expectEscolheCasa],
                                            [expectEscolheCasa, confirmaCasa],
                                            [confirmaCasa.getPath('Aceita receber por e-mail'), verificaProprioAparelhoEmail],
                                            [confirmaCasa.getPath('Insiste receber em casa'), verificaProprioAparelhoCasa],
                                            // COMEÇA
                                            [verificaProprioAparelhoCasa.getPath('* Ligando do próprio aparelho'), servicoFaturaCasa1],
                                                [servicoFaturaCasa1.getPath('* Sucesso no serviço Correios'), existemFaturasAbertoCasa],
                                                    [existemFaturasAbertoCasa, clienteContaDigital],
                                                        [expectFaturasEmAbertoCasa, querReceberFatEmAbertoCasa],
                                                        [querReceberFatEmAbertoCasa.getPath('Não quer receber faturas em aberto'), clienteContaDigital],
                                                        [querReceberFatEmAbertoCasa.getPath('Quer receber faturas em aberto'), enviaFaturasEmAbertoCasa],
                                                        [enviaFaturasEmAbertoCasa, clienteContaDigital],
                                            [verificaProprioAparelhoCasa.getPath('* Ligando de outro aparelho'), expectOutroAparelhoCasa],
                                                [expectOutroAparelhoCasa, fluxoSenhaCasa],
                                                    [fluxoSenhaCasa.getPath('* Senha Incorreta'), ofereceATH],
                                                    [fluxoSenhaCasa.getPath('* Sucesso no Fluxo de Senha'), servicoFaturaCasa1],
                                        // FIM CASA
                                        [escolhaRealizada.getPath('Escolha inválida'), expectSegundaChance],
                                            [expectSegundaChance, ofereceSegundaChance],
                                            [ofereceSegundaChance.getPath('Escolhe receber SMS (Segunda tentativa)'), verificaProprioAparelhoSMS],
                                            [ofereceSegundaChance.getPath('Escolhe receber Email (Segunda tentativa)'), verificaProprioAparelhoEmail],
                                            [ofereceSegundaChance.getPath('Escolhe receber em Casa (Segunda tentativa)'), expectEscolheCasa],
                                            [ofereceSegundaChance.getPath('Escolha inválida (Segunda tentativa)'), verificaProprioAparelhoSMS],
                    [mesPossuiFaturaAberto.getPath('Mês está nas faturas em aberto'), emailValido],

                [pediuAlgumMes.getPath('Não pediu mês específico'), semMesFaturaAberto],
                    [semMesFaturaAberto.getPath('* Não possui fatura em aberto'), expectSemMesNaoPossuiFatura],
                        [expectSemMesNaoPossuiFatura, precisaSegundaVia],
                            [precisaSegundaVia.getPath('Não precisa de segunda via'), perguntaQuerAlgoMais],
                            [precisaSegundaVia.getPath('Precisa de segunda via'), expectPrecisaSegundaVia],
                                [expectPrecisaSegundaVia, qualMesSegundaVia],
                                    [qualMesSegundaVia.getPath('Mês válido'), faturaUltimos12meses],
                                    [qualMesSegundaVia.getPath('Mês inválido'), expectMesInvalido],
                                        [expectMesInvalido, segundaTentativaMes],
                                            [segundaTentativaMes.getPath('Mês válido (segunda tentativa)'), faturaUltimos12meses],
                                            [segundaTentativaMes.getPath('Mês inválido (segunda tentativa)'), ofereceATH],

                    [semMesFaturaAberto.getPath('* Possui fatura em aberto'), emailValido],


        // [billingProfile.getPath('* Falha no billing'), viaDeAcesso],
    

)


pagarConta.mapScenarios();
// pagarConta.showScenarios();
pagarConta.exportScenariosToText();
pagarConta.exportScenariosToExcel();